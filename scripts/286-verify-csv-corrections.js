const { createClient } = require("@supabase/supabase-js")

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error("‚ùå SupabaseÁí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì")
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function verifyCsvCorrections() {
  console.log("üîç CSV‰øÆÊ≠£ÁµêÊûú„ÅÆÊ§úË®º„ÇíÈñãÂßã...")
  console.log("=" * 60)

  try {
    // CSV„Éï„Ç°„Ç§„É´„ÇíÂÜçÂèñÂæó
    console.log("üì• CSV„Éï„Ç°„Ç§„É´„ÇíÂÜçÂèñÂæó‰∏≠...")
    const csvUrl =
      "https://hebbkx1anhila5yf.public.blob.vercel-storage.com/SHOGUN%2BENISA%E7%B4%B9%E4%BB%8B%E8%80%85%E9%A0%86%E3%81%AB%E4%B8%A6%E3%81%B9%E6%9B%BF%E3%81%88%20-%20%E3%82%B7%E3%83%BC%E3%83%882-3sEEqgz48qctjxfbOBP51UPTybAwSP.csv"

    const response = await fetch(csvUrl)
    const csvText = await response.text()

    const lines = csvText.split("\n").filter((line) => line.trim())
    const csvUsers = []
    for (let i = 1; i < lines.length; i++) {
      const values = lines[i].split(",")
      if (values.length >= 4) {
        csvUsers.push({
          name: values[0]?.trim(),
          user_id: values[1]?.trim(),
          tel: values[2]?.trim(),
          referrer: values[3]?.trim() || null,
        })
      }
    }

    console.log(`‚úÖ CSVÂÜçÂèñÂæóÂÆå‰∫Ü: ${csvUsers.length}‰∫∫\n`)

    // „Éá„Éº„Çø„Éô„Éº„Çπ„Åã„Çâ‰øÆÊ≠£Âæå„ÅÆÁä∂ÊÖã„ÇíÂèñÂæó
    console.log("üì• ‰øÆÊ≠£Âæå„ÅÆ„Éá„Éº„Çø„Éô„Éº„ÇπÁä∂ÊÖã„ÇíÂèñÂæó‰∏≠...")
    const { data: dbUsers, error: dbError } = await supabase
      .from("users")
      .select(`
        user_id,
        name,
        referrer_id,
        referrer:referrer_id(user_id, name)
      `)
      .eq("is_admin", false)
      .order("user_id")

    if (dbError) {
      console.error("‚ùå „Éá„Éº„Çø„Éô„Éº„ÇπÂèñÂæó„Ç®„É©„Éº:", dbError)
      return
    }

    console.log(`‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÂèñÂæóÂÆå‰∫Ü: ${dbUsers.length}‰∫∫\n`)

    // CSV„Å®„Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÂÜçÊØîËºÉ
    console.log("üîç ‰øÆÊ≠£ÁµêÊûú„ÅÆÊ§úË®º...")
    console.log("=" * 60)

    const csvUserMap = new Map()
    csvUsers.forEach((user) => {
      if (user.user_id) {
        csvUserMap.set(user.user_id, user)
      }
    })

    let correctCount = 0
    let stillWrongCount = 0
    const stillWrong = []

    dbUsers.forEach((dbUser) => {
      const csvUser = csvUserMap.get(dbUser.user_id)

      if (csvUser) {
        const currentReferrer = dbUser.referrer?.user_id || null
        const correctReferrer = csvUser.referrer || null

        if (currentReferrer === correctReferrer) {
          correctCount++
        } else {
          stillWrongCount++
          stillWrong.push({
            user_id: dbUser.user_id,
            name: dbUser.name,
            current_referrer: currentReferrer || "„Å™„Åó",
            correct_referrer: correctReferrer || "„Å™„Åó",
          })
        }
      }
    })

    console.log(`‚úÖ Ê≠£„Åó„Åè‰øÆÊ≠£„Åï„Çå„Åü: ${correctCount}‰∫∫`)
    console.log(`‚ùå „Åæ„Å†ÈñìÈÅï„Å£„Å¶„ÅÑ„Çã: ${stillWrongCount}‰∫∫\n`)

    if (stillWrong.length > 0) {
      console.log("‚ùå „Åæ„Å†ÈñìÈÅï„Å£„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„Éº:")
      stillWrong.forEach((user, index) => {
        console.log({
          no: index + 1,
          user_id: user.user_id,
          name: user.name,
          ÁèæÂú®„ÅÆÁ¥π‰ªãËÄÖ: user.current_referrer,
          Ê≠£„Åó„ÅÑÁ¥π‰ªãËÄÖ: user.correct_referrer,
        })
      })
    }

    // 1125Ritsuko„ÅÆÊúÄÁµÇÁ¢∫Ë™ç
    const { data: ritsukoReferrals, error: ritsukoError } = await supabase
      .from("users")
      .select("user_id, name")
      .eq("referrer_id", (await supabase.from("users").select("id").eq("user_id", "1125Ritsuko").single()).data?.id)

    if (!ritsukoError) {
      console.log(`\nüîç 1125Ritsuko„ÅÆÁèæÂú®„ÅÆÁ¥π‰ªãÊï∞: ${ritsukoReferrals?.length || 0}‰∫∫`)
      if (ritsukoReferrals && ritsukoReferrals.length > 0) {
        console.log("‚ùå 1125Ritsuko„Åå„Åæ„Å†Á¥π‰ªãËÄÖ„Å´„Å™„Å£„Å¶„ÅÑ„Çã„É¶„Éº„Ç∂„Éº:")
        ritsukoReferrals.forEach((user, index) => {
          console.log(`  ${index + 1}. ${user.user_id} (${user.name})`)
        })
      } else {
        console.log("‚úÖ 1125Ritsuko„ÅÆÁ¥π‰ªãÊï∞„ÅØÊ≠£„Åó„Åè0‰∫∫„Å´„Å™„Çä„Åæ„Åó„Åü")
      }
    }

    // Á¥π‰ªãËÄÖ„É©„É≥„Ç≠„É≥„Ç∞
    const { data: topReferrers, error: topError } = await supabase.rpc("get_top_referrers", { limit_count: 10 })

    if (!topError && topReferrers) {
      console.log("\nüìä ‰øÆÊ≠£Âæå„ÅÆÁ¥π‰ªãËÄÖ„É©„É≥„Ç≠„É≥„Ç∞Ôºà‰∏ä‰Ωç10‰∫∫Ôºâ:")
      topReferrers.forEach((referrer, index) => {
        console.log({
          rank: index + 1,
          referrer_id: referrer.referrer_id,
          referrer_name: referrer.referrer_name,
          referral_count: referrer.referral_count,
        })
      })
    }

    console.log("\n" + "=" * 60)
    console.log("üéØ Ê§úË®ºÁµêÊûú„Çµ„Éû„É™„Éº:")
    console.log(`  üìä CSV„É¶„Éº„Ç∂„ÉºÊï∞: ${csvUsers.length}‰∫∫`)
    console.log(`  üìä „Éá„Éº„Çø„Éô„Éº„Çπ„É¶„Éº„Ç∂„ÉºÊï∞: ${dbUsers.length}‰∫∫`)
    console.log(`  ‚úÖ Ê≠£„Åó„Åè‰øÆÊ≠£„Åï„Çå„Åü: ${correctCount}‰∫∫`)
    console.log(`  ‚ùå „Åæ„Å†ÈñìÈÅï„Å£„Å¶„ÅÑ„Çã: ${stillWrongCount}‰∫∫`)
    console.log(`  üìà ‰øÆÊ≠£ÊàêÂäüÁéá: ${((correctCount / (correctCount + stillWrongCount)) * 100).toFixed(2)}%`)

    if (stillWrongCount === 0) {
      console.log("\nüéâ ÂÖ®„Å¶„ÅÆÁ¥π‰ªãÈñ¢‰øÇ„ÅåCSV„ÅÆÈÄö„Çä„Å´Ê≠£„Åó„Åè‰øÆÊ≠£„Åï„Çå„Åæ„Åó„ÅüÔºÅ")
    } else {
      console.log(`\n‚ö†Ô∏è ${stillWrongCount}‰∫∫„ÅÆ‰øÆÊ≠£„ÅåÂøÖË¶Å„Åß„Åô`)
    }

    return {
      csvUsers: csvUsers.length,
      dbUsers: dbUsers.length,
      correctCount,
      stillWrongCount,
      successRate: ((correctCount / (correctCount + stillWrongCount)) * 100).toFixed(2),
    }
  } catch (error) {
    console.error("‚ùå Ê§úË®º‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü:", error)
    throw error
  }
}

// ÂÆüË°å
verifyCsvCorrections()
  .then((result) => {
    console.log("\nüîç CSV‰øÆÊ≠£ÁµêÊûúÊ§úË®ºÂÆå‰∫Ü")
    console.log(`üìä ‰øÆÊ≠£ÊàêÂäüÁéá: ${result.successRate}%`)
  })
  .catch((error) => {
    console.error("‚ùå Ê§úË®º„Ç®„É©„Éº:", error)
  })
