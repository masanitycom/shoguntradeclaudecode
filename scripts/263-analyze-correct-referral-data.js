// Ê≠£„Åó„ÅÑÁ¥π‰ªãÈñ¢‰øÇ„Éá„Éº„Çø„ÅÆÂàÜÊûêÔºà„É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÈáçË§áÂØæÂøúÁâàÔºâ

const fs = require("fs")
const csv = require("csv-parser")

async function analyzeCorrectReferralData() {
  console.log("üîç Ê≠£„Åó„ÅÑÁ¥π‰ªãÈñ¢‰øÇ„Éá„Éº„Çø„ÇíÂàÜÊûê‰∏≠...\n")

  const correctData = []

  // CSV„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„Åø
  return new Promise((resolve, reject) => {
    fs.createReadStream("./data/correct-referral-data.csv")
      .pipe(csv())
      .on("data", (row) => {
        correctData.push({
          user_id: row.id,
          name: row.name,
          original_email: row["„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ"],
          proxy_email: row["‰ª£ÁêÜ„ÅÆ„É°„Ç¢„Éâ"],
          referrer_id: row.referrer,
          password: row.pass,
          phone: row.tel,
          bo_added: row["BOËøΩÂä†Ê∏à„Åø"],
          investment: row.investment,
          start_date: row["ÈÅãÁî®ÈñãÂßãÊó•"],
          purchase_date: row["Ë≥ºÂÖ•Êó•"],
          has_nft: row.NFT,
        })
      })
      .on("end", () => {
        console.log(`üìä CSV„Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÂÆå‰∫Ü: ${correctData.length}‰ª∂\n`)

        // 1. Âü∫Êú¨Áµ±Ë®à
        console.log("=== Âü∫Êú¨Áµ±Ë®à ===")
        console.log(`Á∑è„É¶„Éº„Ç∂„ÉºÊï∞: ${correctData.length}`)
        console.log(`Á¥π‰ªãËÄÖ„ÅÇ„Çä: ${correctData.filter((u) => u.referrer_id && u.referrer_id !== "").length}`)
        console.log(`Á¥π‰ªãËÄÖ„Å™„Åó: ${correctData.filter((u) => !u.referrer_id || u.referrer_id === "").length}`)

        // „É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÈáçË§áÁä∂Ê≥Å
        const proxyEmailUsers = correctData.filter((u) => u.proxy_email && u.proxy_email.includes("@shogun-trade.com"))
        console.log(`‰ª£ÁêÜ„É°„Ç¢„Éâ‰ΩøÁî®: ${proxyEmailUsers.length}`)
        console.log()

        // 2. ÈáçË¶Å„É¶„Éº„Ç∂„Éº„ÅÆÁ¥π‰ªãÈñ¢‰øÇ
        console.log("=== ÈáçË¶Å„É¶„Éº„Ç∂„Éº„ÅÆÊ≠£„Åó„ÅÑÁ¥π‰ªãÈñ¢‰øÇ ===")
        const importantUsers = ["OHTAKIYO", "1125Ritsuko", "USER0a18", "bighand1011", "Mira"]
        importantUsers.forEach((userId) => {
          const user = correctData.find((u) => u.user_id === userId)
          if (user) {
            console.log(`${userId} (${user.name})`)
            console.log(`  Á¥π‰ªãËÄÖ: ${user.referrer_id || "„Å™„Åó"}`)
            console.log(`  Êú¨Êù•„É°„Éº„É´: ${user.original_email}`)
            console.log(`  ‰ª£ÁêÜ„É°„Éº„É´: ${user.proxy_email || "„Å™„Åó"}`)
            console.log(`  ÊäïË≥áÈ°ç: ${user.investment}`)
            console.log()
          } else {
            console.log(`${userId} -> CSV„Å´Â≠òÂú®„Åó„Åæ„Åõ„Çì\n`)
          }
        })

        // 3. Á¥π‰ªãËÄÖ„Å®„Åó„Å¶Â§ö„ÅèÁôªÂ†¥„Åô„Çã„É¶„Éº„Ç∂„Éº
        console.log("=== ‰∏ªË¶ÅÁ¥π‰ªãËÄÖÔºàTOP 10Ôºâ ===")
        const referrerCounts = {}
        correctData.forEach((user) => {
          if (user.referrer_id && user.referrer_id !== "") {
            referrerCounts[user.referrer_id] = (referrerCounts[user.referrer_id] || 0) + 1
          }
        })

        const topReferrers = Object.entries(referrerCounts)
          .sort(([, a], [, b]) => b - a)
          .slice(0, 10)

        topReferrers.forEach(([referrerId, count]) => {
          const referrer = correctData.find((u) => u.user_id === referrerId)
          console.log(`${referrerId} (${referrer?.name || "‰∏çÊòé"}): ${count}‰∫∫`)
        })
        console.log()

        // 4. OHTAKIYO„ÅÆÁ¥π‰ªãÈñ¢‰øÇ„ÉÅ„Çß„Éº„É≥
        console.log("=== OHTAKIYO„ÅÆÁ¥π‰ªã„ÉÅ„Çß„Éº„É≥ ===")
        let currentUser = correctData.find((u) => u.user_id === "OHTAKIYO")
        let depth = 0
        const chain = []

        while (currentUser && depth < 10) {
          chain.push({
            user_id: currentUser.user_id,
            name: currentUser.name,
            referrer: currentUser.referrer_id,
            investment: currentUser.investment,
          })
          if (!currentUser.referrer_id || currentUser.referrer_id === "") break
          currentUser = correctData.find((u) => u.user_id === currentUser.referrer_id)
          depth++
        }

        console.log("Á¥π‰ªã„ÉÅ„Çß„Éº„É≥:")
        chain.forEach((user, index) => {
          const indent = "  ".repeat(index)
          console.log(`${indent}‚îî‚îÄ ${user.user_id} (${user.name}) [ÊäïË≥á:${user.investment}]`)
          if (user.referrer) {
            console.log(`${indent}   ‚Üë Á¥π‰ªãËÄÖ: ${user.referrer}`)
          }
        })
        console.log()

        // 5. 1125Ritsuko„ÅÆË©≥Á¥∞„Å®Á¥π‰ªã„Åó„Åü„É¶„Éº„Ç∂„Éº
        console.log("=== 1125Ritsuko„ÅÆË©≥Á¥∞ ===")
        const ritsuko = correctData.find((u) => u.user_id === "1125Ritsuko")
        if (ritsuko) {
          console.log(`ÂêçÂâç: ${ritsuko.name}`)
          console.log(`Á¥π‰ªãËÄÖ: ${ritsuko.referrer_id || "„Å™„Åó"}`)
          console.log(`ÊäïË≥áÈ°ç: ${ritsuko.investment}`)
          console.log(`ÈñãÂßãÊó•: ${ritsuko.start_date}`)
          console.log(`Êú¨Êù•„É°„Éº„É´: ${ritsuko.original_email}`)
          console.log(`‰ª£ÁêÜ„É°„Éº„É´: ${ritsuko.proxy_email || "„Å™„Åó"}`)

          // 1125Ritsuko„ÅåÁ¥π‰ªã„Åó„Åü„É¶„Éº„Ç∂„Éº
          const referredUsers = correctData.filter((u) => u.referrer_id === "1125Ritsuko")
          console.log(`Á¥π‰ªã„Åó„Åü„É¶„Éº„Ç∂„ÉºÊï∞: ${referredUsers.length}`)
          if (referredUsers.length > 0) {
            console.log("Á¥π‰ªã„Åó„Åü„É¶„Éº„Ç∂„Éº:")
            referredUsers.forEach((user) => {
              console.log(`  - ${user.user_id} (${user.name}) [ÊäïË≥á:${user.investment}]`)
            })
          }
        } else {
          console.log("1125Ritsuko„ÅåCSV„Å´Ë¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì")
        }
        console.log()

        // 6. ‰ª£ÁêÜ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ‰ΩøÁî®ËÄÖ„ÅÆË©≥Á¥∞
        console.log("=== ‰ª£ÁêÜ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ‰ΩøÁî®ËÄÖ ===")
        const proxyUsers = correctData.filter((u) => u.proxy_email && u.proxy_email.includes("@shogun-trade.com"))
        console.log(`‰ª£ÁêÜ„É°„Éº„É´‰ΩøÁî®ËÄÖ: ${proxyUsers.length}‰∫∫`)

        if (proxyUsers.length > 0) {
          console.log("‰ª£ÁêÜ„É°„Éº„É´‰ΩøÁî®ËÄÖ‰∏ÄË¶ßÔºàÊúÄÂàù„ÅÆ10‰∫∫Ôºâ:")
          proxyUsers.slice(0, 10).forEach((user) => {
            console.log(`  ${user.user_id} (${user.name})`)
            console.log(`    Êú¨Êù•: ${user.original_email}`)
            console.log(`    ‰ª£ÁêÜ: ${user.proxy_email}`)
            console.log(`    Á¥π‰ªãËÄÖ: ${user.referrer_id || "„Å™„Åó"}`)
            console.log()
          })
        }

        // 7. Âæ™Áí∞ÂèÇÁÖß„ÉÅ„Çß„ÉÉ„ÇØ
        console.log("=== Âæ™Áí∞ÂèÇÁÖß„ÉÅ„Çß„ÉÉ„ÇØ ===")
        const visited = new Set()
        const recursionStack = new Set()
        const circularReferences = []

        function hasCycle(userId, path = []) {
          if (recursionStack.has(userId)) {
            circularReferences.push([...path, userId])
            return true
          }
          if (visited.has(userId)) return false

          visited.add(userId)
          recursionStack.add(userId)

          const user = correctData.find((u) => u.user_id === userId)
          if (user && user.referrer_id && user.referrer_id !== "") {
            hasCycle(user.referrer_id, [...path, userId])
          }

          recursionStack.delete(userId)
          return false
        }

        correctData.forEach((user) => {
          if (!visited.has(user.user_id)) {
            hasCycle(user.user_id)
          }
        })

        if (circularReferences.length > 0) {
          console.log("‚ö†Ô∏è Âæ™Áí∞ÂèÇÁÖß„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü:")
          circularReferences.forEach((cycle) => {
            console.log(`  ${cycle.join(" -> ")}`)
          })
        } else {
          console.log("‚úÖ Âæ™Áí∞ÂèÇÁÖß„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü")
        }
        console.log()

        // 8. ÊäïË≥áÈ°çÁµ±Ë®à
        console.log("=== ÊäïË≥áÈ°çÁµ±Ë®à ===")
        const investments = correctData
          .filter((u) => u.investment && !isNaN(Number.parseFloat(u.investment)))
          .map((u) => Number.parseFloat(u.investment))

        if (investments.length > 0) {
          const total = investments.reduce((sum, inv) => sum + inv, 0)
          const average = total / investments.length
          const max = Math.max(...investments)
          const min = Math.min(...investments)

          console.log(`ÊäïË≥áËÄÖÊï∞: ${investments.length}`)
          console.log(`Á∑èÊäïË≥áÈ°ç: $${total.toLocaleString()}`)
          console.log(`Âπ≥ÂùáÊäïË≥áÈ°ç: $${average.toFixed(2)}`)
          console.log(`ÊúÄÂ§ßÊäïË≥áÈ°ç: $${max.toLocaleString()}`)
          console.log(`ÊúÄÂ∞èÊäïË≥áÈ°ç: $${min.toLocaleString()}`)
        }

        resolve(correctData)
      })
      .on("error", reject)
  })
}

// ÂÆüË°å
analyzeCorrectReferralData()
  .then((data) => {
    console.log("\n‚úÖ ÂàÜÊûêÂÆå‰∫Ü")
    console.log(`Ê≠£„Åó„ÅÑ„Éá„Éº„Çø: ${data.length}‰ª∂„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÂèñÂæó`)
    console.log("üìã Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó: ÁèæÂú®„ÅÆDB„Å®„ÅÆÊØîËºÉ„ÇíÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
  })
  .catch((error) => {
    console.error("‚ùå „Ç®„É©„Éº:", error)
  })
